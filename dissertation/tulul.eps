%!PS-Adobe-3.0
%Produced by poppler pdftops version: 0.20.4 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%DocumentMedia: 138x48 138 48 0 () ()
%%BoundingBox: 0 0 138 48
%%Pages: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  2 array astore
  /setpagedevice where {
    pop 2 dict begin
      /PageSize exch def
      /ImagingBBox null def
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
false pdfSetup
%%EndSetup
%%Page: 1 1
%%PageMedia: 138x48
%%PageBoundingBox: 0 0 138 48
%%BeginPageSetup
%%PageOrientation: Portrait
138 48 pdfSetupPaper
pdfStartPage
0 0 138 48 re W
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[1 0 0 1 -528 -397] cm
q
[1 0 0 1 0 0] cm
0 0 1190.550049 841.890015 re
W
q
q
[1 0 0 1 0 -0.109985] cm
q
[1 0 0 1 0 0] cm
0 0 1191 842 re
W
q
/DeviceRGB {} cs
[0.1765 0.1725 0.1804] sc
585.676 433.074 m
585.676 424.875 l
585.676 423.754 586.164 423.168 587.254 423.168 c
588.34 423.168 588.844 423.754 588.844 424.875 c
588.844 433.074 l
591.082 433.074 l
591.082 424.859 l
591.082 422.277 589.559 421.188 587.254 421.188 c
584.949 421.188 583.438 422.277 583.438 424.859 c
583.438 433.074 l
585.676 433.074 l
h
f
592.699 421.352 m
592.699 433.074 l
595.148 433.074 l
598.266 426.125 l
598.301 426.125 l
598.301 433.074 l
600.344 433.074 l
600.344 421.352 l
598.203 421.352 l
594.777 428.918 l
594.746 428.918 l
594.746 421.352 l
592.699 421.352 l
h
f
601.969 421.351 2.238 11.723 re
f
605.262 433.074 m
607.469 433.074 l
609.531 424.695 l
609.562 424.695 l
611.609 433.074 l
613.801 433.074 l
610.812 421.352 l
608.266 421.352 l
605.262 433.074 l
h
f
614.848 421.352 m
614.848 433.074 l
620.988 433.074 l
620.988 431.094 l
617.09 431.094 l
617.09 428.398 l
620.062 428.398 l
620.062 426.418 l
617.09 426.418 l
617.09 423.332 l
621.148 423.332 l
621.148 421.352 l
614.848 421.352 l
h
f
624.844 427.977 m
625.996 427.977 l
626.988 427.977 627.586 428.461 627.586 429.598 c
627.586 430.734 626.988 431.223 625.996 431.223 c
624.844 431.223 l
624.844 427.977 l
h
627.863 421.352 m
625.914 426.125 l
624.844 426.125 l
624.844 421.352 l
622.605 421.352 l
622.605 433.074 l
625.852 433.074 l
628.547 433.074 629.828 431.773 629.828 429.566 c
629.828 428.105 629.309 427.051 628.059 426.578 c
630.266 421.352 l
627.863 421.352 l
h
f
636.012 429.809 m
635.641 430.914 635.152 431.383 634.371 431.383 c
633.574 431.383 633.141 430.898 633.141 430.102 c
633.141 428.332 638.141 428.203 638.141 424.535 c
638.141 422.52 636.758 421.188 634.406 421.188 c
632.586 421.188 631.172 422.18 630.574 424.484 c
632.781 424.957 l
633.039 423.543 633.852 423.039 634.52 423.039 c
635.297 423.039 635.898 423.559 635.898 424.438 c
635.898 426.645 630.898 426.676 630.898 429.957 c
630.898 431.969 632.102 433.234 634.422 433.234 c
636.418 433.234 637.637 432.051 638.027 430.395 c
636.012 429.809 l
h
f
639.23 421.351 2.238 11.723 re
f
649.996 433.074 m
649.996 431.094 l
647.383 431.094 l
647.383 421.352 l
645.145 421.352 l
645.145 431.094 l
642.531 431.094 l
642.531 433.074 l
649.996 433.074 l
h
f
656.738 436.109 m
654.352 433.738 l
652.715 433.738 l
654.223 436.109 l
656.738 436.109 l
h
651.043 421.352 m
651.043 433.074 l
657.176 433.074 l
657.176 431.094 l
653.281 431.094 l
653.281 428.398 l
656.254 428.398 l
656.254 426.418 l
653.281 426.418 l
653.281 423.332 l
657.34 423.332 l
657.34 421.352 l
651.043 421.352 l
h
f
585.547 409.082 m
586.328 409.082 l
587.562 409.082 588.277 409.668 588.277 411.422 c
588.277 414.504 l
588.277 416.16 587.723 416.844 586.328 416.844 c
585.547 416.844 l
585.547 409.082 l
h
583.309 418.824 m
586.426 418.824 l
588.988 418.824 590.418 417.719 590.516 414.766 c
590.516 411.16 l
590.418 408.207 588.988 407.102 586.426 407.102 c
583.309 407.102 l
583.309 418.824 l
h
f
592.133 407.102 m
592.133 418.824 l
598.27 418.824 l
598.27 416.844 l
594.375 416.844 l
594.375 414.148 l
597.344 414.148 l
597.344 412.168 l
594.375 412.168 l
594.375 409.082 l
598.434 409.082 l
598.434 407.102 l
592.133 407.102 l
h
f
603.949 407.102 m
603.949 418.824 l
606.188 418.824 l
606.188 409.082 l
609.793 409.082 l
609.793 407.102 l
603.949 407.102 l
h
f
612.898 410.578 m
612.898 409.277 613.465 408.922 614.359 408.922 c
615.254 408.922 615.82 409.277 615.82 410.578 c
615.82 415.348 l
615.82 416.648 615.254 417.004 614.359 417.004 c
613.465 417.004 612.898 416.648 612.898 415.348 c
612.898 410.578 l
h
610.66 415.059 m
610.66 417.945 612.184 418.984 614.359 418.984 c
616.535 418.984 618.062 417.945 618.062 415.059 c
618.062 410.867 l
618.062 407.98 616.535 406.941 614.359 406.941 c
612.184 406.941 610.66 407.98 610.66 410.867 c
610.66 415.059 l
h
f
621.945 413.727 m
623.094 413.727 l
624.09 413.727 624.688 414.215 624.688 415.348 c
624.688 416.484 624.09 416.973 623.094 416.973 c
621.945 416.973 l
621.945 413.727 l
h
624.965 407.102 m
623.016 411.875 l
621.945 411.875 l
621.945 407.102 l
619.703 407.102 l
619.703 418.824 l
622.949 418.824 l
625.645 418.824 626.926 417.523 626.926 415.316 c
626.926 413.855 626.41 412.801 625.16 412.332 c
627.367 407.102 l
624.965 407.102 l
h
f
630.664 413.727 m
631.816 413.727 l
632.809 413.727 633.41 414.215 633.41 415.348 c
633.41 416.484 632.809 416.973 631.816 416.973 c
630.664 416.973 l
630.664 413.727 l
h
633.688 407.102 m
631.738 411.875 l
630.664 411.875 l
630.664 407.102 l
628.426 407.102 l
628.426 418.824 l
631.672 418.824 l
634.367 418.824 635.648 417.523 635.648 415.316 c
635.648 413.855 635.133 412.801 633.883 412.332 c
636.09 407.102 l
633.688 407.102 l
h
f
639.949 411.551 m
642.176 411.551 l
641.086 416.293 l
641.055 416.293 l
639.949 411.551 l
h
636.75 407.102 m
639.656 418.824 l
642.531 418.824 l
645.355 407.102 l
643.215 407.102 l
642.645 409.57 l
639.543 409.57 l
638.91 407.102 l
636.75 407.102 l
h
f
646.43 407.101 2.238 11.723 re
f
650.312 407.102 m
650.312 418.824 l
652.762 418.824 l
655.879 411.875 l
655.914 411.875 l
655.914 418.824 l
657.957 418.824 l
657.957 407.102 l
655.816 407.102 l
652.391 414.668 l
652.355 414.668 l
652.355 407.102 l
650.312 407.102 l
h
f
659.523 407.102 m
659.523 418.824 l
665.66 418.824 l
665.66 416.844 l
661.762 416.844 l
661.762 414.148 l
664.734 414.148 l
664.734 412.168 l
661.762 412.168 l
661.762 409.082 l
665.82 409.082 l
665.82 407.102 l
659.523 407.102 l
h
f
576.32 421.055 m
576.32 407.93 565.68 397.285 552.555 397.285 c
539.426 397.285 528.785 407.93 528.785 421.055 c
528.785 434.18 539.426 444.824 552.555 444.824 c
565.68 444.824 576.32 434.18 576.32 421.055 c
f
/DeviceRGB {} cs
[1 1 1] sc
552.195 414.105 m
551.668 413.816 551.012 413.66 550.23 413.66 c
547.953 413.66 546.539 414.543 546.539 418.938 c
546.539 433.055 l
539.199 433.055 l
539.199 418.836 l
539.199 411.309 543.223 406.988 550.23 406.988 c
552.355 406.988 553.973 407.34 555.566 408.117 c
553.969 409.641 552.82 411.652 552.195 414.105 c
f
/DeviceRGB {} cs
[1 0.9412 0.298] sc
561.363 418.941 m
561.363 433.059 l
554.023 433.059 l
554.023 418.84 l
554.023 411.312 558.047 406.992 565.055 406.992 c
567.961 406.992 l
567.961 413.664 l
565.055 413.664 l
562.777 413.664 561.363 414.547 561.363 418.941 c
f
Q
Q
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
