type term = App of term * term
          | Lam of string * term
          | Var of string;;

let app fn arg = App (fn, arg);;

let lam v body = Lam (v, body);;

let var v = Var v;;

let rec occurs v = function
  | App (fn, arg) -> occurs v fn || occurs v arg
  | Lam (v_, body) -> (not (v = v_)) && occurs v body
  | Var v_ -> v = v_;;

let rec term_to_string = function
  | App (fn, arg) -> "(" ^ term_to_string fn ^ " " ^ term_to_string arg ^ ")"
  | Lam (v_, body) -> "(lambda (" ^ v_ ^ ") " ^ term_to_string body ^ ")"
  | Var v -> v;;

let lift1 fn x = app (var fn) x;;

let lift2 fn x y = app (app (var fn) x) y;;


(* UTIL *)

let rec list_to_term = function
  | x :: xs -> lift2 "cons" x (list_to_term xs)
  | []  -> var "empty";;


(* LOGIC *)

type entity = term;;
type prop = term;;

type var = effect
  operation new_var : unit -> string
end;;

let v = new var;;

let var_gen =
  let var_cycle = [ "x"; "y"; "z"; "s"; "t"; "u"; "v"; "w" ] in
  let tick_it = fun v -> v ^ "'" in
  handler
  | v#new_var () k -> (function | v :: vs -> k v vs
                                | [] -> match (map tick_it var_cycle) with
                                        | v :: vs -> k v vs)
  | val x          -> fun var -> x
  | finally f      -> f var_cycle;;

let forall p =
  let x = v#new_var () in
  lift1 "forall" (lam x (p x));;

let exists p =
  let x = v#new_var () in 
  lift1 "exists" (lam x (p x));;

let iota p =
  let x = v#new_var () in 
  lift1 "iota" (lam x (p x));;

let conj = lift2 "and";;

let neg = lift1 "not";;


(* EFFECTS (types and instances) *)


(* HANDLERS *)


(* top handler *)

let top s_thunk =
  let s = with var_gen handle
          s_thunk () in
  term_to_string s;;


(* DYNAMIC LOGIC *)


(* SEMANTIC DOMAIN *)

let mary' = var "Mary"
let ulysses' = var "Ulysses"

let book' = lift1 "book"
let man' = lift1 "man"
let woman' = lift1 "woman"
let boxer' = lift1 "boxer"
let apartment' = lift1 "apartment"

let read' = lift2 "read"
let loved' = lift2 "loved"
let escaped_from' = lift2 "escaped_from"
let poss' = lift2 "poss"

let eq' = lift2 "="


(* GRAMMAR *)
let mary () = mary'

let ulysses () = ulysses'

let who n rel_clause x =
  conj (n x) (rel_clause (fun () -> x) ())


let book = book'
let man = man'
let woman = woman'
let boxer = boxer'
let apartment = apartment'

let read subj_thunk obj_thunk () =
    read' (subj_thunk ()) (obj_thunk ())

let loved subj_thunk obj_thunk () =
    loved' (subj_thunk ()) (obj_thunk ())

let escaped_from subj_thunk obj_thunk () =
    escaped_from' (subj_thunk ()) (obj_thunk ())

let _s owner_np_thunk ownee_n () =
  let owner_np = owner_np_thunk () in
  iota (fun x -> conj (ownee_n (var x)) (poss' owner_np (var x)))

let dot s1_thunk s2_thunk () =
  conj (s1_thunk ()) (s2_thunk ())


(* EXAMPLES*)
let sent1 = top (read mary ulysses);;
