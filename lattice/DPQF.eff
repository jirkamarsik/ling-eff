type term = App of term * term
          | Lam of string * term
          | Var of string;;

let app fn arg = App (fn, arg);;

let lam v body = Lam (v, body);;

let var v = Var v;;

let rec occurs v = function
  | App (fn, arg) -> occurs v fn || occurs v arg
  | Lam (v_, body) -> (not (v = v_)) && occurs v body
  | Var v_ -> v = v_;;

let rec term_to_string = function
  | App (fn, arg) -> "(" ^ term_to_string fn ^ " " ^ term_to_string arg ^ ")"
  | Lam (v_, body) -> "(lambda (" ^ v_ ^ ") " ^ term_to_string body ^ ")"
  | Var v -> v;;

let lift1 fn x = app fn x;;

let lift2 fn x y = app (app fn x) y;;


(* UTIL *)

let any = fold_left (fun x y -> x || y) false;;

let rec list_to_term = function
  | x :: xs -> lift2 (var "cons") x (list_to_term xs)
  | []  -> var "empty";;


(* LOGIC *)

type entity = term;;
type prop = term;;

type var = effect
  operation new_var : unit -> string
end;;

let v = new var;;

let var_gen =
  let var_cycle = [ "x"; "y"; "z"; "s"; "t"; "u"; "v"; "w" ] in
  let tick_it = fun v -> v ^ "'" in
  handler
  | v#new_var () k -> (function | v :: vs -> k v vs
                                | [] -> match (map tick_it var_cycle) with
                                        | v :: vs -> k v vs)
  | val x          -> fun var -> x
  | finally f      -> f var_cycle;;

let forall p =
  let x = v#new_var () in
  lift1 (var "forall") (lam x (p x));;

let exists p =
  let x = v#new_var () in 
  lift1 (var "exists") (lam x (p x));;

let conj = lift2 (var "and");;

let neg = lift1 (var "not");;


(* EFFECTS (types and instances) *)

type clause = effect
  operation scope_over : ((entity -> prop) -> prop) -> entity
end;;

let c = new clause;;

type drt = effect
  operation fresh : unit -> entity
  operation get : unit -> string list
  operation assert : prop -> unit
end;;

let d = new drt;;

type presupposition = effect
  operation presuppose : (entity -> prop) -> entity
end;;

let p = new presupposition;;

type 'a focus = effect
  operation focus : 'a -> 'a
end;;

let f_np = new focus;;
let f_tv = new focus;;


(* HANDLERS *)

let empty_context = handler
  | d#get () k -> k []
  | val x      -> x;;

let find_some vars term = any (map (fun v -> occurs v term) vars);;

let drs = handler
  | p#presuppose property k -> fun refs ->
      if find_some refs (property (var "_")) then
        exists (fun x -> conj (property (var x)) (k (var x) (x :: refs)))
      else
        k (p#presuppose property) refs
  | d#fresh () k    -> fun refs -> exists (fun x -> k (var x) (x :: refs))
  | d#get () k      -> fun refs -> k (d#get () @ refs) refs
  | d#assert prop k -> fun refs -> conj prop (k () refs)
  | val x           -> fun refs -> x
  | finally f       -> f [];;

let tensed_clause = handler
  | c#scope_over q k -> q k
  | val x            -> x;;

let accomodate = handler
  | p#presuppose prop k -> let x = d#fresh () in
                           let () = d#assert (prop x) in
                           k x
  | val x               -> x;;

(* top handler *)

let top s_thunk =
  let s = with var_gen handle
          with empty_context handle
          with drs handle
          with accomodate handle
          s_thunk () in
  term_to_string s;;


(* DYNAMIC LOGIC *)
let dand p_thunk q_thunk () =
  conj (p_thunk ()) (q_thunk ())

let dnot prop_thunk () =
  neg (with drs handle prop_thunk ())

let dexists p =
  p (d#fresh ())

let dforall p =
  dnot (fun () -> let x = d#fresh () in
                  dnot (fun () -> p x) ()) ()

let dimp p_thunk q_thunk =
  dnot (dand p_thunk (dnot q_thunk))


(* SEMANTIC DOMAIN *)

let mary' = var "Mary"
let ulysses' = var "Ulysses"

let book' = lift1 (var "book")
let man' = lift1 (var "man")
let woman' = lift1 (var "woman")
let boxer' = lift1 (var "boxer")
let apartment' = lift1 (var "apartment")

let sel' index refs = lift1 (var ("sel_" ^ index)) (list_to_term (map var refs))

let fetch' index = sel' index (d#get ())

let eq' = lift2 (var "=")


(* GRAMMAR *)
let mary () =
  p#presuppose (eq' mary')

let ulysses () =
  p#presuppose (eq' ulysses')

let he () = fetch' "he"
let she () = fetch' "she"
let it () = fetch' "it"

let everything () = c#scope_over dforall

let everyone = everything

let something () = d#fresh ()

let someone = something

let a n () =
  let x = d#fresh () in
  let () = d#assert (n x) in
  x

let some = a

let every n () =
  c#scope_over (fun k -> (dforall (fun x -> dimp (fun () -> n x) (fun () -> k x) ())))

let who n rel_clause x =
  conj (n x) (rel_clause (fun () -> x) ())


let book = book'
let man = man'
let woman = woman'
let boxer = boxer'
let apartment = apartment'

let poss' = lift2 (var "poss")

let read () = var "read"
let loved () = var "loved"
let escaped_from () = var "escaped_from"

let tv_s tv_thunk obj_thunk subj_thunk () =
  with tensed_clause handle
    let subj = subj_thunk () in
    let tv = tv_thunk () in
    let obj = obj_thunk () in
    lift2 tv subj obj
  
let _s owner_np_thunk ownee_n () =
  let owner_np = owner_np_thunk () in
  p#presuppose (fun x -> conj (ownee_n x) (poss' owner_np  x))

let block w = handler
  | p#presuppose property k -> 
      if occurs w (property (var "_")) then
        exists (fun x -> conj (property (var x)) (k (var x)))
      else
        k (p#presuppose property)

let handle_focus = handler
  | f_np#focus np k -> let w = v#new_var () in
                       let p = lam w (with block w handle (k (var w))) in
dand (fun () -> app p np) (fun () -> dforall (fun y -> dimp (fun () -> neg (eq' y np)) (dnot (fun () -> app p y)) ())) ()
  | f_tv#focus tv k -> let w = v#new_var  () in
                       let p = lam w (with block w handle (k (var w))) in
dand (fun () -> app p tv) (fun () -> dforall (fun y -> dimp (fun () -> neg (eq' y tv)) (dnot (fun () -> app p y)) ())) ()

let only vp =
  fun subj_thunk () -> with handle_focus handle vp subj_thunk ()

let fnp np_thunk () =
  f_np#focus (np_thunk ())

let ftv tv_thunk () =
  f_tv#focus (tv_thunk ())

let dot s1_thunk s2_thunk () =
  conj (s1_thunk ()) (s2_thunk ())

let output_refs () =
  list_to_term (map var (d#get ()))


(* EXAMPLES*)
let sent1 = top (tv_s read ulysses mary);;
let sent2 = top (tv_s read everything mary);;
let sent2_ = top (tv_s read something mary);;
let sent3 = top (tv_s read everything someone);;
let sent4 = top (tv_s read something everyone);;

let sent5 = top (dot (tv_s read everything someone) (tv_s read everything someone));;
let sent6 = top (dot (tv_s read everything someone) (tv_s read something everyone));;
let sent7 = top (dot (tv_s read something everyone) (tv_s read everything someone));;
let sent8 = top (dot (tv_s read something everyone) (tv_s read something everyone));;

let sent85 = top (tv_s read (every book) (every man))

let sent9 = top (dot (dot (tv_s read everything someone) (tv_s read everything someone)) output_refs);;
let sent10 = top (dot (dot (tv_s read everything someone) (tv_s read something everyone)) output_refs);;
let sent11 = top (dot (dot (tv_s read something everyone) (tv_s read everything someone)) output_refs);;
let sent12 = top (dot (dot (tv_s read something everyone) (tv_s read something everyone)) output_refs);;

let sent13 = top (tv_s read (some book) mary);;
let sent14 = top (tv_s read (every book) mary);;

let sent15 = top (dot (tv_s read (a book) mary) (tv_s loved it she));;

let sent16 = top (tv_s loved it (every (who man (tv_s read (a book)))));;
let sent16' = top (tv_s loved it (every (who man (fun x -> tv_s read x x))));;
let sent16'' = top (tv_s loved it (every (who man (fun x -> tv_s read (a book) mary))));;

let sent17 = top (dot (tv_s loved mary everyone) (tv_s read ulysses she));;

let sent19 = top (tv_s escaped_from (_s he apartment) (a boxer));;
let sent20 = top (tv_s escaped_from (_s he apartment) (every boxer));;
let sent21 = top (tv_s escaped_from mary (every boxer));;

let sent22 = top (only (tv_s read (fnp ulysses)) mary);;
let sent23 = top (only (tv_s (ftv read) ulysses) mary);;
let sent24 = top (only (tv_s read (_s (fnp he) book)) (every boxer));;
